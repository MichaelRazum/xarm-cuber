from torch import tensor

import action_controller


def test_task_finished():
    position = tensor([611.3739, 509.2050, 186.3110, 900.0573, 873.3440, 505.5778])
    assert action_controller.is_position_end_position(position) is True
    position = tensor([0.3739, 509.2050, 186.3110, 900.0573, 873.3440, 505.5778])
    assert action_controller.is_position_end_position(position) is True
    position = tensor([619.0031, 495.6694,  34.6873, 827.2461, 882.8656, 520.8914])
    assert action_controller.is_position_end_position(position) is True

    position = tensor([611.3739, 509.2050, 186.3110, 900.0573, 873.3440, 60.5778])
    assert action_controller.is_position_end_position(position, ) is False

    position = tensor([21.0423, 962.3662, 38.0134, 651.6859, 528.4338, 490.1546])
    assert action_controller.is_position_end_position(position,  verbose=False) is True
    position = tensor([ 20.0978, 506.5472, 184.7722, 796.7578, 441.5901, 495.3092])
    assert action_controller.is_position_end_position(position,  verbose=False) is False
    position = tensor([ 24.9030, 140.3158, 193.3217, 799.9996, 421.4164, 494.9289])
    assert action_controller.is_position_end_position(position,  verbose=True) is False
    position = tensor([20.1948, 937.7505, 38.3715, 627.4576, 320.4956, 489.6923])
    assert action_controller.is_position_end_position(position,  verbose=False) is False

    # position = tensor([38.1948, 67.7505, 44.3715, 657.4576, 573.4956, 486.6923])
    # assert action_controller.is_position_end_position(position,  verbose=False) is True
    position = tensor([ 27.6563, 170.5099,  49.6993, 633.6936, 559.5380, 482.4892])
    assert action_controller.is_position_end_position(position, verbose=True) is True

    position = tensor([ 25.8294, 152.4745,  38.3251, 630.5708, 319.3526, 494.4767])
    assert action_controller.is_position_end_position(position, verbose=True) is False

    position = tensor([ 35.6173, 122.3741,  50.9421, 634.5276, 571.7812, 487.1512])
    assert action_controller.is_position_end_position(position, verbose=True) is True
    position = tensor([ 35.6173, 122.3741,  50.9421, 634.5276, 571.7812, 487.1512])
    assert action_controller.is_position_end_position(position, verbose=True) is True
    position = tensor([ 53.0392, 102.2988,  35.5435, 633.6959, 520.8325, 493.6642])
    assert action_controller.is_position_end_position(position, verbose=True) is True



def test_prod_error():
    positions = [tensor([18.6541, 497.6127, 93.3886, 536.3391, 492.6991, 498.7155]),
    tensor([23.3900, 499.3334, 105.6054, 546.2026, 470.7360, 496.5032]),
    tensor([21.2419, 498.3398, 100.7717, 540.8451, 436.9444, 496.7768]),
    tensor([22.3363, 502.1873, 83.8616, 550.7614, 414.4358, 496.1594]),
    tensor([24.5606, 508.0761, 77.9136, 575.3866, 413.9085, 496.2586]),
    tensor([25.3766, 504.0537, 67.4783, 590.7372, 394.7256, 496.3231]),
    tensor([25.6641, 510.2562, 55.0891, 604.1366, 390.2059, 494.7950]),
    tensor([28.7621, 512.3859, 55.2918, 621.8681, 378.6793, 494.2292]),
    tensor([27.4569, 508.6062, 60.1963, 619.3951, 357.8603, 493.5366]),
    tensor([29.2588, 508.1465, 59.8639, 619.3861, 357.7137, 493.2222]),
    tensor([27.1236, 508.2927, 60.2835, 625.8126, 359.2649, 493.5367]),
    tensor([25.3007, 520.2451, 59.1236, 626.2664, 359.8997, 493.6187]),
    tensor([24.9436, 518.1412, 63.7357, 630.0938, 376.1404, 495.3286]),
    tensor([26.9725, 520.0389, 60.5222, 633.4288, 363.8288, 495.8232]),
    tensor([25.4685, 512.0720, 62.0551, 637.4495, 366.5192, 496.8376]),
    tensor([27.6140, 518.1005, 60.7656, 641.8480, 359.1368, 496.7518]),
    tensor([29.4232, 521.0906, 55.3716, 642.6968, 357.4547, 496.9435]),
    tensor([27.2785, 524.7025, 51.4713, 641.4434, 353.9987, 496.8314]),
    tensor([29.1653, 519.7452, 52.5976, 639.8790, 352.4726, 496.9453]),
    tensor([31.0653, 519.8733, 51.8503, 641.8159, 348.2885, 497.2109]),
    tensor([20.2798, 528.3972, 43.3128, 638.5267, 348.9156, 496.8299]),
    tensor([17.4055, 528.4684, 43.5013, 640.7585, 340.2382, 496.0222]),
    tensor([18.3829, 528.3777, 44.2686, 642.5370, 333.7360, 495.1964]),
    tensor([20.0056, 538.2209, 39.8869, 641.4671, 336.0255, 494.3201]),
    tensor([16.6478, 543.1859, 41.0978, 644.0254, 341.0621, 495.0107]),
    tensor([20.0145, 537.7399, 41.4049, 644.9575, 339.2630, 496.0486]),
    tensor([19.5754, 543.5497, 43.4060, 643.1638, 331.6369, 495.8071]),
    tensor([19.3818, 538.0615, 43.2048, 641.5112, 336.4269, 496.4561]),
    tensor([20.1180, 541.4643, 44.3658, 638.9830, 338.8926, 495.6229]),
    tensor([22.1650, 539.9080, 42.8520, 638.8757, 335.1412, 495.7442]),
    tensor([20.1503, 523.6669, 43.7448, 640.6348, 333.4948, 496.3803]),
    tensor([19.1743, 527.3058, 42.7545, 639.7816, 336.2283, 496.4179]),
    tensor([18.0017, 521.6985, 44.0023, 640.1883, 334.7136, 497.1139]),
    tensor([19.5456, 529.0897, 44.1832, 641.1088, 334.4743, 496.5050]),
    tensor([19.9148, 533.2224, 44.0029, 641.4972, 330.8723, 496.1990]),
    tensor([18.0335, 500.3432, 46.0153, 643.2051, 334.0033, 496.1920]),
    tensor([19.1889, 456.2818, 49.6865, 641.7288, 334.0076, 496.5262]),
    tensor([19.4213, 452.4049, 49.0939, 641.0629, 333.7794, 496.4396]),
    tensor([19.4868, 418.2007, 49.9286, 643.8448, 331.9032, 497.1315]),
    tensor([21.2631, 393.7999, 47.7943, 642.0126, 330.3603, 496.5804]),
    tensor([12.2168, 384.4125, 47.6867, 643.0586, 329.3470, 493.8141]),
    tensor([15.5845, 355.6176, 44.3740, 642.6904, 331.9934, 494.5529]),
    tensor([25.2477, 352.5730, 44.0102, 640.7397, 335.9443, 493.9861]),
    tensor([20.5022, 311.5417, 46.3584, 642.5302, 335.9218, 494.9551]),
    tensor([23.1197, 272.1550, 45.9624, 643.4661, 337.8041, 495.4529]),
    tensor([23.2760, 229.9552, 44.2007, 642.5219, 336.0353, 494.4382]),
    tensor([23.8206, 194.9994, 42.4602, 640.7643, 337.1285, 494.7407]),
    tensor([21.6523, 193.0362, 43.8981, 644.5378, 336.2794, 495.2267]),
    tensor([22.8935, 170.0275, 42.6521, 643.3075, 337.0137, 494.8940]),
    tensor([20.0545, 154.1348, 42.0879, 643.0464, 335.4777, 494.2184]),
    tensor([21.6392, 146.1069, 41.0801, 642.9005, 337.3965, 494.5708]),
    tensor([20.3004, 129.9066, 41.6479, 644.2066, 334.2175, 494.7009]),
    tensor([21.3098, 122.0481, 42.0051, 644.3940, 335.9484, 494.9891]),
    tensor([21.1465, 100.7262, 43.1949, 643.7634, 335.6771, 494.9984]),
    tensor([21.4953, 81.7225, 42.4085, 644.5830, 334.7698, 494.6672]),
    tensor([19.2422, 70.9443, 42.8288, 645.0868, 334.7533, 494.4619]),
    tensor([20.8255, 70.9748, 42.2386, 643.9782, 334.5588, 494.8086]),]
    for pos in positions:
        if action_controller.is_position_end_position(pos, verbose=False) is True:
            assert action_controller.is_position_end_position(pos, verbose=True) is False

